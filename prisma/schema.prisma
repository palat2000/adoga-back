// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  email     String? @unique
  mobile    String? @unique
  firstName String  @map("first_name")
  lastName  String  @map("last_name")
  password  String
  books     Book[]
}

model Placer {
  id            String      @id @default(uuid())
  name          String      @unique
  type          String
  email         String?     @unique
  mobile        String?     @unique
  password      String
  lat           Decimal?
  lng           Decimal?
  subDistrict   SubDistrict @relation(fields: [subDistrictId], references: [id])
  rooms         Room[]
  subDistrictId Int         @map("subDistrict_id")
}

model Customer {
  id        String @id @default(uuid())
  firstName String @map("first_name")
  lastName  String @map("last_name")
  email     String
  mobile    String
  books     Book[]
}

model Book {
  id         String    @id @default(uuid())
  fromDate   DateTime  @map("from_date")
  toDate     DateTime  @map("to_date")
  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @map("customer_id")
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?   @map("user_id")
  orders     Order[]
}

model Room {
  id             String   @id @default(uuid())
  totalRoomCount Int      @map("total_room_count")
  remaining      Int
  placer         Placer   @relation(fields: [placerId], references: [id])
  placerId       String   @map("placer_id")
  category       Category @relation(fields: [categoryId], references: [id])
  categoryId     String   @map("category_id")
}

model Order {
  id     String      @id @default(uuid())
  amount Int
  date   DateTime    @default(now())
  status OrderStatus
  book   Book        @relation(fields: [bookId], references: [id])
  bookId String      @map("book_id")
}

model Category {
  id                  String @id @default(uuid())
  name                String
  price               Int
  maximumNumberPeople Int    @map("maximum_number_people")
  desc                String
  rooms               Room[]
}

model Province {
  id        Int        @id @default(autoincrement())
  name      String
  districts District[]
}

model District {
  id           Int           @id @default(autoincrement())
  name         String
  province     Province      @relation(fields: [provinceId], references: [id])
  provinceId   Int           @map("province_id")
  subDistricts SubDistrict[]
}

model SubDistrict {
  id         Int      @id @default(autoincrement())
  name       String
  postId     String   @map("post_id")
  district   District @relation(fields: [districtId], references: [id])
  districtId Int      @map("district_id")
  placers    Placer[]
}

enum OrderStatus {
  PENDING
  SUCCESS
}
